# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, CasperLabs LLC
# This file is distributed under the same license as the CasperLabs Tech
# Spec package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CasperLabs Tech Spec \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-23 20:03+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:6
msgid "Key-Value Storage Tutorial"
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:8
msgid ""
"This tutorial covers a simple contract, which creates a key that stores a"
" ``CLType`` value. This example will show you how to store a *U64*, "
"*string*, *account hash*, or *U512* value."
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:10
msgid ""
"The code is available in the `Casper Ecosystem GitHub <https://github.com"
"/casper-ecosystem/kv-storage-contract>`_. Or, you can get started in "
"`GitPod <https://gitpod.io/#https://github.com/casper-ecosystem/kv-"
"storage-contract>`_."
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:14
msgid "The Contract"
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:16
msgid ""
"Let's start by understanding the structure of the contract itself. Here "
"we create a contract and name it ``kvstorage_contract``. The contract "
"package will be stored under this name on the blockchain. Since the key-"
"value contract is slightly stateless, initialization is not required."
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:138
msgid "Testing the Contract"
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:140
msgid ""
"The Casper Contracts SDK supports local testing of smart contracts. This "
"tutorial will cover how to test the U64 key-value function, which you can"
" adapt for other types."
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:142
msgid ""
"To test the contract, you need to deploy the contract and store the value"
" on chain. Here is some sample code to accomplish these steps:"
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:196
msgid "Write Unit Tests"
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:198
msgid ""
"With these functions in place, it's possible to start writing tests for "
"the contract."
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:229
msgid "Running Locally"
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:231
msgid ""
"You can run unit tests locally if you have set up the contract using "
"`cargo-casper` as shown in the `Getting started "
"<https://docs.casperlabs.io/en/latest/dapp-dev-guide/setup-of-rust-"
"contract-sdk.html>`_ guide."
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:238
msgid "Deploying to the Testnet and Interacting with the Contract"
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:240
msgid ""
"When working with the testnet, create an account on `Testnet CSPR Live "
"<https://testnet.cspr.live>`_ and fund it using the faucet. Download the "
"private key and use the key to sign the deployment. It's possible to "
"create keys using the rust client as well."
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:243
msgid "Deploy the Contract"
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:245
msgid ""
"After compiling the contract, you need to deploy the compiled WASM to the"
" network. This action installs the contract in the blockchain."
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:247
msgid ""
"The following example shows you how to use the Casper client to retrieve "
"the contract session hash and the block hash where the contract is "
"deployed. The paths for the *secret-key* and *session-path* are relative "
"to your system. You need to specify the paths on your machine to run the "
"command."
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:258
msgid "**Query the Account & Get the Contract Hash**"
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:260
msgid ""
"The internal state of the blockchain is updated via a series of steps "
"(blocks). All blockchain queries must include a `global state hash` which"
" corresponds to the block hash or height of the blockchain.  Visit "
"`Querying the address of a contract <https://docs.casperlabs.io/en/latest"
"/dapp-dev-guide/calling-contracts.html#querying-global-state-for-the-"
"address-of-a-contract>`_."
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:262
msgid "**Invoke an Entry Point & Set a value**"
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:264
msgid ""
"Once the contract is deployed, you can create another deploy, which calls"
" one of the entry points within the contract. You must know the entry "
"point's name or the session hash retrieved in the previous step to call "
"an entry point. The command below shows you how to do this. The *session-"
"path* is relative to your system. Specify the path on your machine and "
"then run the command."
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:266
msgid ""
"The kv-client has four distinct commands to set key-values for U64, "
"string, U512, and account hash. In this example, we will use a String."
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:279
msgid "If the deploy works, a you will see a similar response:"
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:286
msgid "Query the Contract On Chain"
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:288
msgid ""
"Contracts can be executed under different contexts. In this example, when"
" the contract is deployed, it runs in the context of a ``Contract`` and "
"not a ``Session``. This means that all stored keys are not stored under "
"the account hash, but within the context of the contract. Therefore, when"
" we query to retrieve the value under a key, we are querying "
"``AccountHash/kvstorage_contract/<key-name>`` and not just ``AccountHash"
"/<key-name>``."
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:292
msgid ""
"It would be best if you first found the block hash for the block that "
"contains your deploy. Once you have the requisite block hash, you can use"
" the Casper client to retrieve the session hash."
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:294
msgid ""
"Reading a value is simple; we obtain the block hash under which the value"
" is stored, and then using that block hash, we use the ``query-state`` "
"command to retrieve the value stored under a named key."
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:296
msgid "An example global state query looks like this:"
msgstr ""

#: ../../dapp-dev-guide/tutorials/kv-storage-tutorial.rst:302
msgid ""
"Please reference the `Querying Section "
"<https://docs.casperlabs.io/en/latest/dapp-dev-guide/calling-"
"contracts.html#querying-global-state-for-the-address-of-a-contract>`_ for"
" more details."
msgstr ""

#~ msgid "Key Value Storage Tutorial"
#~ msgstr ""

#~ msgid ""
#~ "This tutorial covers a simple contract,"
#~ " which creates a key that stores "
#~ "a ``CLType`` value. This example will"
#~ " show you how to store a *u64*,"
#~ " *string*, *account hash*, or *U512* "
#~ "value."
#~ msgstr ""

#~ msgid ""
#~ "The CasperLabs Contracts SDK supports "
#~ "local testing of smart contracts. This"
#~ " tutorial will cover how to test "
#~ "the u64 key-value function. This "
#~ "can be easily adapted it for other"
#~ " types also."
#~ msgstr ""

#~ msgid ""
#~ "In order to test the contract, the"
#~ " value must be stored, and the "
#~ "contract has to be deployed. Here "
#~ "is some sample code for these "
#~ "steps:"
#~ msgstr ""

#~ msgid ""
#~ "It's possible to run the unit "
#~ "tests locally- if you have set up"
#~ " the contract using `cargo-casperlabs "
#~ "<https://crates.io/cargo-casperlabs>`_. The steps"
#~ " to set up the SDK are in "
#~ "the guide."
#~ msgstr ""

#~ msgid ""
#~ "When working with the testnet, create"
#~ " an account in `CLarity "
#~ "<https://clarity.casperlabs.io>`_ and fund it "
#~ "using the faucet. Download the private"
#~ " key and use the key to sign"
#~ " the deployment. It's possible to "
#~ "create keys using the rust client "
#~ "as well."
#~ msgstr ""

#~ msgid ""
#~ "After the contract has been compiled,"
#~ " it's time to deploy the compiled "
#~ "wasm to the network. This action "
#~ "installs the contract in the blockchain."
#~ " Once the contract is deployed, the"
#~ " client can retrieve the contract "
#~ "session hash as well as the "
#~ "blockhash where the contract is "
#~ "deployed."
#~ msgstr ""

#~ msgid ""
#~ "```casper-client put-deploy --chain-name"
#~ " :raw-html-m2r:`<CHAIN-NAME>` --node-"
#~ "address http://\\ :raw-html-m2r:`<HOST>`\\ "
#~ ":\\ :raw-html-m2r:`<PORT>` --secret-key"
#~ " /home/keys/secretkey.pem --session-path  $HOME"
#~ "/kv-storage-contract/target/wasm32-unknown-"
#~ "unknown/release/contract.wasm  --payment-amount "
#~ "1000000000000"
#~ msgstr ""

#~ msgid "If the deploy works, a response similar this will be returned:"
#~ msgstr ""

#~ msgid ""
#~ "Contracts can be executed under "
#~ "different contexts. In this example, "
#~ "when the contract is deployed, it "
#~ "runs in the context of a "
#~ "``Contract`` and not a ``Session``. This"
#~ " means that all stored keys are "
#~ "not stored under the account hash, "
#~ "but within the context of the "
#~ "contract. Therefore when we query to "
#~ "retrieve the value under a key, we"
#~ " are actually querying "
#~ "``AccountHash/kvstorage_contract/<key-name>`` and "
#~ "not just ``AccountHash/<key-name>``."
#~ msgstr ""

#~ msgid ""
#~ "You must first find the block hash"
#~ " for the block that contains your "
#~ "deploy. Once you have the requisite "
#~ "block hash, then you can use "
#~ "``casper-client`` to retrieve the session"
#~ " hash"
#~ msgstr ""

#~ msgid ""
#~ "Reading a value is simple enough, "
#~ "we obtain the block hash under "
#~ "which the value, is stored, and "
#~ "then\\ :raw-html-m2r:`<br>` using that"
#~ " block hash, and the ``query-state``"
#~ " command you can easily retrieve and"
#~ " value that was stored under a "
#~ "named key. Please reference the "
#~ "`Querying Section <https://docs.casperlabs.io/en/latest"
#~ "/dapp-dev-guide/querying.html>`_ for details. "
#~ "An example global state query looks "
#~ "like this:"
#~ msgstr ""

