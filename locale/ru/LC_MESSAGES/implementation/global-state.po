# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, CasperLabs LLC
# This file is distributed under the same license as the CasperLabs Tech
# Spec package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
# 
# Translators:
# David Tsaritov <tsaritov@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CasperLabs Tech Spec\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-23 20:03+0000\n"
"PO-Revision-Date: 2021-06-26 21:48+0000\n"
"Last-Translator: David Tsaritov <tsaritov@gmail.com>, 2021\n"
"Language-Team: Russian (https://www.transifex.com/caspernetwork/teams/122124/ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || (n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../implementation/global-state.rst:4
msgid "Global State"
msgstr "Глобальное состояние"

#: ../../implementation/global-state.rst:9
msgid "Introduction"
msgstr "Введение"

#: ../../implementation/global-state.rst:11
msgid ""
"The “global state” is the storage layer for the blockchain. All accounts, "
"contracts, and any associated data they have are stored in the global state."
" Our global state has the semantics of a key-value store (with additional "
"permissions logic since not all users can access all values in the same "
"way). Refer to :ref:`Keys and Permissions <serialization-standard-state-"
"keys>` for further information on keys. Each block causes changes to this "
"global state because of the execution of the deploys it contains. For "
"validators to efficiently judge the correctness of these changes, "
"information about the new state needs to be communicated succinctly. "
"Moreover, we need to communicate pieces of the global state to users while "
"allowing them to verify the correctness of the parts they receive. For these"
" reasons, the key-value store is implemented as a :ref:`Merkle trie <global-"
"state-trie>`."
msgstr ""
"“Глобальное состояние” - это слой хранения для блокчейна. Все учетные "
"записи, контракты и любые связанные с ними данные хранятся в глобальном "
"состоянии. Наше глобальное состояние имеет семантику хранилища значений "
"ключей (с логикой дополнительных разрешений, поскольку не все пользователи "
"могут получить доступ ко всем значениям одинаковым образом). См. :ref:`Keys "
"and Permissions<serialization-standard-state-keys>`  для получения "
"дополнительной информации о ключах. Каждый блок вызывает изменения в этом "
"глобальном состоянии из-за выполнения содержащихся в нем развертываний. "
"Чтобы валидаторы могли эффективно судить о правильности этих изменений, "
"информация о новом состоянии должна быть передана кратко. Кроме того, нам "
"необходимо сообщать пользователям фрагменты глобального состояния, позволяя "
"им проверять правильность полученных ими фрагментов. По этим причинам "
"хранилище значений ключей реализовано в виде структуры дерева Меркла  "
":ref:`Merkle trie <global-state-trie>`."

#: ../../implementation/global-state.rst:26
msgid "Merkle trie structure"
msgstr "Структура дерева Меркла"

#: ../../implementation/global-state.rst:28
msgid ""
"At a high level, a Merkle trie is a key-value store data structure that can "
"be shared piece-wise in a verifiable way (via a construction called a Merkle"
" proof). Each node is labeled by the hash of its data. Leaf nodes are "
"labeled with the hash of their data. Non-leaf nodes are labeled with the "
"hash of the labels of their child nodes."
msgstr ""
"На высоком уровне дерево Меркла - это структура данных хранилища ключевых "
"значений, которая может быть разделена по частям проверяемым способом (с "
"помощью конструкции, называемой доказательством Меркла). Каждая нода помечен"
" хэшем ее данных. Конечные ноды помечаются хэшем их данных. Не-конечные ноды"
" помечаются хэшем меток их дочерних нод."

#: ../../implementation/global-state.rst:31
msgid ""
"Our implementation of the trie has radix of 256, meaning each branch node "
"can have up to 256 children. A path through the tree can be an array of "
"bytes, and serialization directly links a key with a path through the tree "
"as its associated value."
msgstr ""
"Наша реализация структуры Меркла имеет радиус 256, что означает, что каждая "
"ветка ноды может иметь до 256 дочерних элементов. Путь через дерево может "
"быть массивом байтов, и сериализация напрямую связывает ключ с путем через "
"дерево в качестве связанного с ним значения."

#: ../../implementation/global-state.rst:33
msgid "Formally, a trie node is one of the following:"
msgstr "Формально, нода в такой структуре это одно из следующих:"

#: ../../implementation/global-state.rst:35
msgid "a leaf, which includes a key and a value"
msgstr "лист, в котором заключен ключ и значение"

#: ../../implementation/global-state.rst:36
msgid ""
"a branch, which has up to 256 ``blake2b256`` hashes, pointing to up to 256 "
"other nodes in the trie (recall each node is labeled by its hash)"
msgstr ""
"ветка, которая имеет до 256 хешей ``blake2b256`` , указывающих на 256 других"
" нод в структуре (вспоминаем, что каждая нода помечена своим хешем)"

#: ../../implementation/global-state.rst:38
msgid ""
"an extension node, which includes a byte array (called the affix) and a "
"``blake2b256`` hash pointing to another node in the trie"
msgstr ""
"нода расширения, которая включает массив байтов (называемый аффиксом) и хэш "
"\"blake2b256\", указывающий на другую ноду в структуре"

#: ../../implementation/global-state.rst:41
msgid ""
"The purpose of the extension node is to allow path compression. Consider an "
"example where all keys use the same first four bytes for values in the trie."
" In this case, it would be inefficient to traverse through four branch nodes"
" where there is only one choice; instead, the root node of the trie could be"
" an extension node with affix equal to those first four bytes and pointer to"
" the first non-trivial branch node."
msgstr ""
"Цель ноды расширения - разрешить сжатие пути. Рассмотрим пример, в котором "
"все ключи используют одни и те же первые четыре байта для значений в "
"структуре. В этом случае было бы неэффективно проходить через четыре ноды "
"ответвления, где есть только один выбор; вместо этого корневой нодой "
"структуры может быть нода расширения с аффиксом, равным этим первым четырем "
"байтам, и указателем на первую нетривиальную ноду - ответвление."

#: ../../implementation/global-state.rst:46
msgid "The rust implementation of our trie can be found on GitHub:"
msgstr "Как это все осуществляется в Rust, можно найти в GitHub:"

#: ../../implementation/global-state.rst:48
msgid ""
"`definition of the trie data structure <https://github.com/casper-network"
"/casper-"
"node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie/mod.rs#L320>`_"
msgstr ""
"определение древовидной структуры информации `definition of the trie data "
"structure <https://github.com/casper-network/casper-"
"node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie/mod.rs#L320>`_"

#: ../../implementation/global-state.rst:49
msgid ""
"`reading from the trie <https://github.com/casper-network/casper-"
"node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie_store/operations/mod.rs#L37>`_"
msgstr ""
"чтение из структуры `reading from the trie <https://github.com/casper-"
"network/casper-"
"node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie_store/operations/mod.rs#L37>`_"

#: ../../implementation/global-state.rst:50
msgid ""
"`writing to the trie <https://github.com/casper-network/casper-"
"node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie_store/operations/mod.rs#L638>`_"
msgstr ""
"запись в структуру `writing to the trie <https://github.com/casper-network"
"/casper-"
"node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie_store/operations/mod.rs#L638>`_"

#: ../../implementation/global-state.rst:52
msgid ""
"Note: Conceptually, each block has its trie because the state changes based "
"on the deploys it contains. For this reason, our implementation has a notion"
" of a ``TrieStore``, which allows us to look up the root node for each trie."
msgstr ""
"Примечание: Концептуально каждый блок имеет свое дерево, поскольку состояние"
" изменяется в зависимости от содержащихся в нем развертываний. По этой "
"причине в нашей реализации есть понятие Хранилище деревьев - \"TrieStore\", "
"которое позволяет нам искать корневую ноду для каждой такой структуры."

#~ msgid ""
#~ "`definition of the trie data structure <https://github.com/CasperLabs"
#~ "/casper-"
#~ "node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie/mod.rs#L320>`_"
#~ msgstr ""
#~ "определение древовидной информационной структуры `definition of the trie "
#~ "data structure <https://github.com/CasperLabs/casper-"
#~ "node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie/mod.rs#L320>`_"

#~ msgid ""
#~ "`reading from the trie <https://github.com/CasperLabs/casper-"
#~ "node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie_store/operations/mod.rs#L37>`_"
#~ msgstr ""
#~ "чтение из древовидной структуры `reading from the trie "
#~ "<https://github.com/CasperLabs/casper-"
#~ "node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie_store/operations/mod.rs#L37>`_"

#~ msgid ""
#~ "`writing to the trie <https://github.com/CasperLabs/casper-"
#~ "node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie_store/operations/mod.rs#L638>`_"
#~ msgstr ""
#~ "запись в древовидную структуру `writing to the trie "
#~ "<https://github.com/CasperLabs/casper-"
#~ "node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie_store/operations/mod.rs#L638>`_"
